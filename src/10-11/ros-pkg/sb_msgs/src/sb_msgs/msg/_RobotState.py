"""autogenerated by genmsg_py from RobotState.msg. Do not edit."""
import roslib.message
import struct


class RobotState(roslib.message.Message):
  _md5sum = "4868e8ee5450af403376c7390599c5b8"
  _type = "sb_msgs/RobotState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string portname    # the port that the microcontroller is attached to
string serial_no   # the unique identifier of the microcontroller
uint32 num_analog  # number of analog devices supported
float64[] analog   # values of analog devices, in volts
float64[] ir #values of IR devices in cm
uint32 num_i2c   # number of I2C bus devices supported
int32[] i2c      # integer values of I2C devices
uint32 num_batteries  # number of batteries the system can monitor
string[] battery_names # the name of each battery
uint32[] batteries    # integer values of battery levels
uint32 odometer   # integer value of odometer ticks since last poll


"""
  __slots__ = ['portname','serial_no','num_analog','analog','ir','num_i2c','i2c','num_batteries','battery_names','batteries','odometer']
  _slot_types = ['string','string','uint32','float64[]','float64[]','uint32','int32[]','uint32','string[]','uint32[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       portname,serial_no,num_analog,analog,ir,num_i2c,i2c,num_batteries,battery_names,batteries,odometer
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.portname is None:
        self.portname = ''
      if self.serial_no is None:
        self.serial_no = ''
      if self.num_analog is None:
        self.num_analog = 0
      if self.analog is None:
        self.analog = []
      if self.ir is None:
        self.ir = []
      if self.num_i2c is None:
        self.num_i2c = 0
      if self.i2c is None:
        self.i2c = []
      if self.num_batteries is None:
        self.num_batteries = 0
      if self.battery_names is None:
        self.battery_names = []
      if self.batteries is None:
        self.batteries = []
      if self.odometer is None:
        self.odometer = 0
    else:
      self.portname = ''
      self.serial_no = ''
      self.num_analog = 0
      self.analog = []
      self.ir = []
      self.num_i2c = 0
      self.i2c = []
      self.num_batteries = 0
      self.battery_names = []
      self.batteries = []
      self.odometer = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.portname
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.serial_no
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.num_analog))
      length = len(self.analog)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.analog))
      length = len(self.ir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ir))
      buff.write(_struct_I.pack(self.num_i2c))
      length = len(self.i2c)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.i2c))
      buff.write(_struct_I.pack(self.num_batteries))
      length = len(self.battery_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.battery_names:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.batteries)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.batteries))
      buff.write(_struct_I.pack(self.odometer))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.portname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.serial_no = str[start:end]
      start = end
      end += 4
      (self.num_analog,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.analog = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ir = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.num_i2c,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.i2c = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.num_batteries,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.battery_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.battery_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.batteries = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.odometer,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.portname
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.serial_no
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.num_analog))
      length = len(self.analog)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.analog.tostring())
      length = len(self.ir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ir.tostring())
      buff.write(_struct_I.pack(self.num_i2c))
      length = len(self.i2c)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.i2c.tostring())
      buff.write(_struct_I.pack(self.num_batteries))
      length = len(self.battery_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.battery_names:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.batteries)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.batteries.tostring())
      buff.write(_struct_I.pack(self.odometer))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.portname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.serial_no = str[start:end]
      start = end
      end += 4
      (self.num_analog,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.analog = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ir = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.num_i2c,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.i2c = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.num_batteries,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.battery_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.battery_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.batteries = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (self.odometer,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
