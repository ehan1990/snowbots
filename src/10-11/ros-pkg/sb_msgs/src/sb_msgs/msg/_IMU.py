"""autogenerated by genmsg_py from IMU.msg. Do not edit."""
import roslib.message
import struct


class IMU(roslib.message.Message):
  _md5sum = "b80745dc30b0f0d1cf203fb334331734"
  _type = "sb_msgs/IMU"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 c_x
int32 c_y
int32 c_z

int32 a_x
int32 a_y
int32 a_z

int32 g_x
int32 g_y
int32 g_z

"""
  __slots__ = ['c_x','c_y','c_z','a_x','a_y','a_z','g_x','g_y','g_z']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       c_x,c_y,c_z,a_x,a_y,a_z,g_x,g_y,g_z
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(IMU, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.c_x is None:
        self.c_x = 0
      if self.c_y is None:
        self.c_y = 0
      if self.c_z is None:
        self.c_z = 0
      if self.a_x is None:
        self.a_x = 0
      if self.a_y is None:
        self.a_y = 0
      if self.a_z is None:
        self.a_z = 0
      if self.g_x is None:
        self.g_x = 0
      if self.g_y is None:
        self.g_y = 0
      if self.g_z is None:
        self.g_z = 0
    else:
      self.c_x = 0
      self.c_y = 0
      self.c_z = 0
      self.a_x = 0
      self.a_y = 0
      self.a_z = 0
      self.g_x = 0
      self.g_y = 0
      self.g_z = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.c_x, _x.c_y, _x.c_z, _x.a_x, _x.a_y, _x.a_z, _x.g_x, _x.g_y, _x.g_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.c_x, _x.c_y, _x.c_z, _x.a_x, _x.a_y, _x.a_z, _x.g_x, _x.g_y, _x.g_z,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.c_x, _x.c_y, _x.c_z, _x.a_x, _x.a_y, _x.a_z, _x.g_x, _x.g_y, _x.g_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.c_x, _x.c_y, _x.c_z, _x.a_x, _x.a_y, _x.a_z, _x.g_x, _x.g_y, _x.g_z,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9i = struct.Struct("<9i")
