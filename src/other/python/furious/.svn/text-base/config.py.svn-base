"""
SUMMARY:
Functions for parsing configuration files for, and configuring instances
of, the furious.devices.FuriousRobot class.

WHERE TO START:
configure_robot() is probably the function you'll want to use.

@author  Ian Phillips
"""

import os

class FuriousConfigError(Exception):
  """
  This exception is raised when configure_robot() below finds problems 
  in a config file.
  """
  def __init__(self, filename, line, message):
    self.file = filename
    self.line = line
    self.msg = message

  def __str__(self):
    return "File %s is invalid at line %i: %" (self.file, self.line, self.msg)

###  end FuriousConfigError  ###




def parse_config(config_file):
  """
  Reads the given configuration file and returns a dictionary
  of its values.
  """
  config = {}
  file = open(config_file)
  line_num = 0
  for line in file:
    line_num += 1
    # Remove comments
    comment_begin = line.find("#")
    if comment_begin > -1:  # There's a comment
      line = line[:comment_begin]  # slice it out

    # Skip empty lines
    line = line.strip()
    if len(line) == 0:
      continue

    # Split line into parts and clean them up
    parts = line.split("=")
    if len(parts) < 2:
      raise FuriousConfigError(config_file, line_num, 
          "Format should be: key=val[,val...]" )
    key = parts[0].strip().lower()  # key names should always be lowercase
    vals = parts[1].split(",")

    for i in range(len(vals)):
      vals[i] = vals[i].strip()

    # Take the appropriate action depending on the first value in
    # the line.
    if key == "servo":
      if key not in config:
        config[key] = {}
      # format: servo=name, id, min, center, max
      # eg:     servo=throttle, 6, 220, 280, 320
      if len(vals) < 5:
        raise FuriousConfigError(config_file, line_num,
          "Servo format is: servo=name,id,min,center,max" )
      name = vals[0]
      config[key][name] = [ int(x) for x in vals[1:] ]

    elif key == "sonar":
      # format: sonar=list, of, sonar, ids
      # eg:     sonar=11, 12, 13
      config[key] = [ int(x) for x in vals ]

    elif key == "odometer":
      # format: odometer=meters-per-tick
      # eg:     odometer=0.33
      config[key] = float(vals[0])

    # TODO: Add battery level customization here

  file.close()
  return config

###  end parse_config()  ###



def save_config(config, filename):
  """
  Takes a dictionary of configuration settings (as generated by 
  parse_config()) and a filename and saves the configuration to that file.
  """
  file = open(filename)
  lines = []
  for line in file:
    # Default behaviour is to keep the line intact -- it might be a
    # comment or useful blank.
    updated_line = line
    if "=" in line:
      parts = line.split("=")
      key = parts[0].strip()
      val = parts[1].strip()
      if key == "servo":
        vals = val.split(",")
        sname = vals[0].strip()
        svals = ",".join( [ str(x) for x in config['servo'][sname] ] )
        updated_line = "%s=%s,%s" % (key, sname, svals)
      elif key == "odometer":
        updated_line = "%s=%.2f" % (key, config['odometer'])
      elif key == "sonar":
        svals = ",".join( [ str(x) for x in config['sonar'] ] )
        updated_line = "%s=%s" % (key, svals )

    if not updated_line.endswith(os.linesep):
      updated_line = updated_line + os.linesep
    lines.append(updated_line)

  file.close()
  file = open(filename, "w")
  file.writelines(lines)
  file.close()

###  end save_config()  ###



def configure_robot(robot, config_file):
  """
  Configures the given robot according to the settings in the given
  configuration file.
  @param robot  A furious.devices.FuriousRobot instance to be configured
  @param config_file  A filename containing configuration settings
  @return None
  """

  # parse_config() takes care of the messiness of reading and cleaning
  # up the config file.
  config = parse_config(config_file)
  for key in config:
    if key == "servo":
      for servo_name in config[key]:
        servo  = config[key][servo_name]
        id     = servo[0]
        min    = servo[1]
        center = servo[2]
        max    = servo[3]
        robot.add_servo(servo_name, id, min, center, max)

    elif key == "sonar":
      for id in config[key]:
        robot.add_sonars(id)

    elif key == "odometer":
      robot.configure_odometer( config[key] )

###  end configure_robot()  ###

